import os
import subprocess
import pyautogui
import webbrowser
import requests
from datetime import datetime
from gtts import gTTS  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from pyfiglet import Figlet  # –î–ª—è ASCII-–∞—Ä—Ç–∞

confirmation_requests = {}

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìù –û—Ç–∫—Ä—ã—Ç—å –ë–ª–æ–∫–Ω–æ—Ç", callback_data="open_notepad"),
            InlineKeyboardButton("üì∏ –°–¥–µ–ª–∞—Ç—å –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data="screenshot"),
        ],
        [
            InlineKeyboardButton("üîå –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="shutdown"),
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", callback_data="restart"),
        ],
        [
            InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å YouTube", callback_data="youtube"),
            InlineKeyboardButton("üïí –ü–æ–∫–∞–∑–∞—Ç—å –í—Ä–µ–º—è", callback_data="time"),
        ],
        [
            InlineKeyboardButton("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å Steam", callback_data="launch_steam"),
            InlineKeyboardButton("üöó –ó–∞–ø—É—Å–∫ Alt:V", callback_data="launch_altv"),
        ],
        [
            InlineKeyboardButton("üî´ –ó–∞–ø—É—Å—Ç–∏—Ç—å PUBG", callback_data="launch_pubg"),
            InlineKeyboardButton("üéµ Spotify", callback_data="launch_spotify"),
        ],
        [
            InlineKeyboardButton("üî´ CS2", callback_data="launch_cs2"),
            InlineKeyboardButton("üíª –í—ã–ø–æ–ª–Ω–∏—Ç—å CMD", callback_data="run_cmd"),
        ],
        [
            InlineKeyboardButton("üé≠ –í–≤–µ—Å—Ç–∏ ASCII-—Ç–µ–∫—Å—Ç", callback_data="ascii"),
            InlineKeyboardButton("üòÇ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É", callback_data="joke"),
        ],
        [
            InlineKeyboardButton("üéÆ –ú–µ–º", callback_data="meme"),
        ],
        [
            InlineKeyboardButton("üé• TikTok", callback_data="open_tiktok"),
            InlineKeyboardButton("üí¨ Discord", callback_data="open_discord"),
        ],
        [
            InlineKeyboardButton("üì± Telegram", callback_data="open_telegram"),
            InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º—É–∂—É", callback_data="call_husband"),
        ],
    ]

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "- /ascii [—Ç–µ–∫—Å—Ç] ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII-–∞—Ä—Ç–∞!\n"
        "- /joke ‚Äî –°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç\n"
        "- /meme ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
        "- /speak [—Ç–µ–∫—Å—Ç] ‚Äî –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
        "- –û—Ç–∫—Ä—ã—Ç—å TikTok, Discord, Telegram –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º—É–∂—É –∏–∑ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


# –ü–æ–∫–∞–∑ –≤—Ä–µ–º–µ–Ω–∏
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text(f"üïí –¢–µ–∫—É—â–µ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è: `{now}`", parse_mode="Markdown")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII-–∞—Ä—Ç–∞
async def ascii_art(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è ASCII-–∞—Ä—Ç–∞\n–ü—Ä–∏–º–µ—Ä: `/ascii hello`")
        return
    text = " ".join(context.args)

    try:
        f = Figlet(font="slant")  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ "slant"
        art = f.renderText(text)
        await update.message.reply_text(f"```\n{art}\n```", parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ASCII-–∞—Ä—Ç–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
async def speak(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: `/speak –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?`")
        return

    text = " ".join(context.args)
    lang = "ru"

    try:
        # –°–æ–∑–¥–∞–µ–º MP3 —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º gTTS
        tts = gTTS(text=text, lang=lang)
        file_path = "output.mp3"
        tts.save(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(file_path, "rb") as audio:
            await update.message.reply_audio(audio=audio, caption="üéôÔ∏è –í–æ—Ç –≤–∞—à–∞ –æ–∑–≤—É—á–∫–∞!")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(file_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")


# –®—É—Ç–∫–∏
async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    jokes = [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≥–æ—Ä–∞—é—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ cache.",
        "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–µ—Ä–µ–¥ –µ–¥–æ–π? Ctrl + Alt + Del.",
        "–ü–æ—á–µ–º—É —É –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –û–Ω–∏ –±–∏—Ç–∞–º–∏ –ø–∏—Ç–∞—é—Ç—Å—è.",
    ]
    random_joke = jokes[datetime.now().second % len(jokes)]  # –ë–µ—Ä–µ–º —à—É—Ç–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    await update.message.reply_text(f"üòÇ {random_joke}")


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–æ–≤
async def meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = "https://www.reddit.com/r/memes.json?limit=100"
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers)
        memes = response.json()["data"]["children"]

        meme = memes[datetime.now().second % len(memes)]["data"]["url"]
        await update.message.reply_photo(meme)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ (–¥–æ–±–∞–≤–ª—è–µ–º speak)
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    if query.data == "ascii":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ `/ascii [—Ç–µ–∫—Å—Ç]` –¥–ª—è ASCII-–∞—Ä—Ç–∞!")
    elif query.data == "joke":
        await joke(query, context)
    elif query.data == "meme":
        await meme(query, context)
    elif query.data == "open_tiktok":
        await open_tiktok(update, context)
    elif query.data == "open_discord":
        await open_discord(update, context)
    elif query.data == "open_telegram":
        await open_telegram(update, context)
    elif query.data == "call_husband":
        await call_husband(update, context)


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TOKEN = "–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞"  # –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("time", get_time))
    app.add_handler(CommandHandler("ascii", ascii_art))
    app.add_handler(CommandHandler("speak", speak))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    app.add_handler(CommandHandler("joke", joke))
    app.add_handler(CommandHandler("meme", meme))
    app.add_handler(CallbackQueryHandler(handle_callback))  # –í—Å–µ –∫–Ω–æ–ø–∫–∏

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()